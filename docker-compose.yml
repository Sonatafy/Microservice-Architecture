version: '3.8'

# Define a dedicated network upfront
networks:
  loadsure-network:
    name: microservice-network
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3.12-management
    networks:
      - loadsure-network
        # Only expose management UI for development, optionally 
    ports:
      - "15672:15672"  # Management UI can be helpful during development
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M

  redis:
    image: redis:7-alpine
    networks:
      - microservice-network
    # No exposed ports for internal services
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 256M
    command: redis-server --appendonly yes

  postgres:
    image: postgres:14-alpine
    networks:
      - microservice-network
    # No exposed ports by default - only expose in development if needed
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      # DB_NAME will be overridden in environment-specific files
      - POSTGRES_DB=${DB_NAME:-microservice_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME:-microservice_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 512M

  db-setup:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - node:18-alpine
    networks:
      - microservice-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_DIALECT=${DB_DIALECT:-postgres}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-microservice_db}
      - DB_SSL=${DB_SSL:-false}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        npx sequelize-cli db:migrate &&
        echo 'Migrations completed successfully!'
      "
    restart: "no"

  api-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - microservice-network
    expose:
      - "3000"  # Only expose within network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - NODE_OPTIONS=--experimental-vm-modules
      - DB_SSL=${DB_SSL:-false}
      - DB_DIALECT=${DB_DIALECT:-postgres}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-microservice_db}
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX_REQUESTS=100
      - DOCKER_SCALE=true
      - SERVICE_INSTANCE=${HOSTNAME}
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:alpine
    networks:
      - microservice-network
    # Only expose nginx, which provides the API gateway
    ports:
      - "${API_PORT:-3001}:80"  # Expose NGINX on configurable port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - loadsure-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - NODE_OPTIONS=--experimental-vm-modules
      - DB_SSL=${DB_SSL:-false}
      - DB_DIALECT=${DB_DIALECT:-postgres}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-microservice_db}
      - WORKER_CONCURRENCY=3
      - WORKER_ID=${HOSTNAME}
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      api-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: node src/services/workerService.js
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  queue-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - microservice-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - DOCKER_SCALE=true
      - MIN_WORKERS=1
      - MAX_WORKERS=5
      - SCALE_UP_THRESHOLD=10
      - SCALE_DOWN_THRESHOLD=2
      - CHECK_INTERVAL=10000
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: node src/services/queueMonitorStarter.js

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - microservice-network
    ports:
      - "${FRONTEND_PORT:-8081}:8080"  # Expose frontend on configurable port
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VUE_APP_API_URL=http://localhost:3000/api
    depends_on:
      - api-service
    deploy:
      replicas: 1

volumes:
  rabbitmq_data:
  postgres_data:
  redis_data:
